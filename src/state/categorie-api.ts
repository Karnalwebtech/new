import { apiKey, apiUrl } from "@/config";
import { getToken } from "@/lib/set-localstorage";
import { CategorieFormData, getCateforieResponse } from "@/types/categorie-type";
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"; // Ensure /react is imported
import { getCateforieDetailsResponse } from "../types/categorie-type";

export const categorieApi = createApi({
    reducerPath: "categorieApi",
    baseQuery: fetchBaseQuery({
        baseUrl: apiUrl,
        prepareHeaders: (headers) => {
            headers.set("x-api-key", apiKey!); // Add API key here
            headers.set("Authorization", `Bearer ${getToken('token')}`); // Add API key here
            return headers;
        },
        credentials: "include",
    }),
    tagTypes: ["Categorie"],
    endpoints: (builder) => ({
        addNewCategorie: builder.mutation<void, CategorieFormData>({
            query: (data) => {
                const formData = new FormData();
                formData.append("data", JSON.stringify(data))
                return {
                    url: "/add-categorie",
                    method: "POST",
                    body: formData, // Use formData as body
                };
            },
            invalidatesTags: [{ type: "Categorie", id: "LIST" }],
        }),
        updateCategorie: builder.mutation<void, CategorieFormData>({
            query: (data) => {
                const formData = new FormData();
                formData.append("data", JSON.stringify(data))
                return {
                    url: `edit-categorie-details/${data.id}`,
                    method: "PUT",
                    body: formData, // Use formData as body
                };
            },
            invalidatesTags: [{ type: "Categorie", id: "LIST" }],
        }),
        categorieDetails: builder.query<getCateforieDetailsResponse, { id: string }>({
            query: ({ id }) => ({
                url: `categorie-details/${id}`,
                method: "GET",
            }),
            providesTags: [{ type: "Categorie", id: "LIST" }],
        }),
        deleteCateorie: builder.mutation<void, { id: string }>({
            query: ({ id }) => ({
                url: `categorie-remove/${id}`,
                method: "DELETE", // Use DELETE instead of PUT
            }),
            invalidatesTags: [{ type: "Categorie", id: "LIST" }],
        }),
        getAllcategorie: builder.query<
            getCateforieResponse,
            {
                type?: string;
                rowsPerPage?: number;
                page?: number;
            } | void
        >({
            query: (filters) => {
                // Initialize the query params object with the default value for isActive
                const params: Record<string, string | number | boolean> = {
                    // is_active: filters.is_active, // Default to true
                };
                // Add filters to the query parameters if they are present
                if (filters) {
                    if (filters.type) {
                        params.type = filters.type; // Convert number to string
                    }
                    if (filters.rowsPerPage) {
                        params.rowsPerPage = filters.rowsPerPage; // Convert number to string
                    }
                    if (filters.page) {
                        params.page = filters.page; // Convert number to string
                    }
                }

                return {
                    url: "all-categorie",
                    params, // Use the dynamically constructed params
                    method: "GET",
                };
            },
            providesTags: [{ type: "Categorie", id: "LIST" }],
        }),
    }),
});

// Correct hook name generated by createApi
export const {
    useAddNewCategorieMutation,
    useGetAllcategorieQuery,
    useCategorieDetailsQuery,
    useUpdateCategorieMutation,
    useDeleteCateorieMutation,
} = categorieApi;
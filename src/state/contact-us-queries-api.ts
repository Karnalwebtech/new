import { apiKey, apiUrl } from "@/config";
import { getToken } from "@/lib/set-localstorage";
import { getContactUsQuiresResponse } from "@/types/contactus-quiers-type";
import { getPostDetailsResponse } from "@/types/post-type";
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"; // Ensure /react is imported

export const contactusQueries = createApi({
  reducerPath: "contactusQueries",
  baseQuery: fetchBaseQuery({
    baseUrl: apiUrl,
    prepareHeaders: async (headers) => {
      headers.set("x-api-key", apiKey!); // Add API key here
      headers.set("Authorization", `Bearer ${getToken("token")}`); // Add API key here
      return headers;
    },
    credentials: "include",
  }),
  tagTypes: ["Contac-us-queries"],
  endpoints: (builder) => ({

    getSingle: builder.query<getPostDetailsResponse, { id: string }>({
      query: ({ id }) => ({
        url: `post-details/${id}`,
        method: "GET",
      }),
      providesTags: [{ type: "Contac-us-queries", id: "LIST" }],
    }),
    getAllContactUsQueries: builder.query<
    getContactUsQuiresResponse,
      {
        rowsPerPage?: number;
        page?: number;
      } | void
    >({
      query: (filters) => {
        const params: Record<string, string | number | boolean> = {};
        // Add filters to the query parameters if they are present
        if (filters) {
          if (filters.rowsPerPage) {
            params.rowsPerPage = filters.rowsPerPage; // Convert number to string
          }
          if (filters.page) {
            params.page = filters.page; // Convert number to string
          }
        }

        return {
          url: "all-queries",
          params, // Use the dynamically constructed params
          method: "GET",
        };
      },
      providesTags: [{ type: "Contac-us-queries", id: "LIST" }],
    }),
  }),
});

// Correct hook name generated by createApi
export const {
  useGetAllContactUsQueriesQuery,
  useGetSingleQuery,
} = contactusQueries;
import { apiKey, apiUrl } from "@/config";
import { getToken } from "@/lib/set-localstorage";
import { GetAllUserResponse } from "@/types/user-type";
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"; // Ensure /react is imported

export const userApi = createApi({
    reducerPath: "userApi",
    baseQuery: fetchBaseQuery({
        baseUrl: apiUrl,
        prepareHeaders: (headers) => {
            headers.set("x-api-key", apiKey!); // Add API key here
            headers.set("Authorization", `Bearer ${getToken('token')}`); // Add API key here
            return headers;
        },
        credentials: "include",
    }),
    tagTypes: ["user"],
    endpoints: (builder) => ({
      
        deleteUser: builder.mutation<void, { id: string }>({
            query: ({ id }) => ({
                url: `user/${id}`,
                method: "DELETE", // Use DELETE instead of PUT
            }),
            invalidatesTags: [{ type: "user", id: "LIST" }],
        }),
        getAllUsers: builder.query<
            GetAllUserResponse,
            {
                rowsPerPage?: number;
                page?: number;
            } | void
        >({
            query: (filters) => {
                // Initialize the query params object with the default value for isActive
                const params: Record<string, string | number | boolean> = {
                    // is_active: filters.is_active, // Default to true
                };
                // Add filters to the query parameters if they are present
                if (filters) {
                    if (filters.rowsPerPage) {
                        params.rowsPerPage = filters.rowsPerPage; // Convert number to string
                    }
                    if (filters.page) {
                        params.page = filters.page; // Convert number to string
                    }
                }

                return {
                    url: "users",
                    params, // Use the dynamically constructed params
                    method: "GET",
                };
            },
            providesTags: [{ type: "user", id: "LIST" }],
        }),
    }),
});

// Correct hook name generated by createApi
export const {
    useGetAllUsersQuery,
    useDeleteUserMutation
} = userApi;
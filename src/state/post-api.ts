import { apiKey } from "@/config";
import { getToken } from "@/lib/set-localstorage";
import { getPostDetailsResponse, getPostResponse, PostFormData } from "@/types/post-type";
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"; // Ensure /react is imported

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

export const postApi = createApi({
  reducerPath: "postApi",
  baseQuery: fetchBaseQuery({
    baseUrl: apiUrl,
   prepareHeaders: async (headers) => {
         headers.set("x-api-key", apiKey!); // Add API key here
         headers.set("Authorization", `Bearer ${getToken("token")}`); // Add API key here
         return headers;
       },
       credentials: "include",
  }),
  tagTypes: ["Post"],
  endpoints: (builder) => ({
    addNewPost: builder.mutation<void, PostFormData>({
      query: (data) => {
        const formData = new FormData();
        formData.append("data",JSON.stringify(data))
        return {
          url: "add-post",
          method: "POST",
          body: formData, // Use formData as body
        };
      },
      invalidatesTags: [{ type: "Post", id: "LIST" }],
    }),
    updatePost: builder.mutation<void, PostFormData>({
      query: (data) => {
        const formData = new FormData();
        formData.append("data",JSON.stringify(data))
        return {
          url: `edit-post-details/${data?.id}`,
          method: "PUT",
          body: formData, // Use formData as body
        };
      },
      invalidatesTags: [{ type: "Post", id: "LIST" }],
    }),
    getSingle: builder.query<getPostDetailsResponse, {id:string}>({
      query: ({id}) => ({
        url: `post-details/${id}`,
        method: "GET",
      }),
      providesTags: [{ type: "Post", id: "LIST" }],
    }),
    deletePost: builder.mutation<void, {id:string}>({
      query: ({id}) => ({
        url: `post-remove/${id}`,
        method: "DELETE", // Use DELETE instead of PUT
      }),
      invalidatesTags: [{ type: "Post", id: "LIST" }],
    }),
    getAllPost: builder.query<
    getPostResponse,
      {
        type?: string;
        rowsPerPage?: number;
        page?: number;
      } | void
    >({
      query: (filters) => {
        const params: Record<string, string | number | boolean> = {};
        // Add filters to the query parameters if they are present
        if (filters) {
          if (filters.rowsPerPage) {
            params.rowsPerPage = filters.rowsPerPage; // Convert number to string
          }
          if (filters.page) {
            params.page = filters.page; // Convert number to string
          }
        }

        return {
          url: "all-post",
          params, // Use the dynamically constructed params
          method: "GET",
        };
      },
      providesTags: [{ type: "Post", id: "LIST" }],
    }),
  }),
});

// Correct hook name generated by createApi
export const {
  useAddNewPostMutation,
  useGetAllPostQuery,
  useGetSingleQuery,
  useUpdatePostMutation,
  useDeletePostMutation,
} = postApi;